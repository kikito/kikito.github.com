<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Enrique García Cota]]></title>
  <link href="http://kikito.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://kikito.github.com/"/>
  <updated>2012-07-31T18:46:19+02:00</updated>
  <id>http://kikito.github.com/</id>
  <author>
    <name><![CDATA[Enrique García Cota]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Coding with an Accent]]></title>
    <link href="http://kikito.github.com/blog/2012/07/19/coding-with-an-accent/"/>
    <updated>2012-07-19T00:00:00+02:00</updated>
    <id>http://kikito.github.com/blog/2012/07/19/coding-with-an-accent</id>
    <content type="html"><![CDATA[<p>Here is one little tip you might not know: programming languages, like spoken languages, have accents.</p>

<p>Well, maybe I'm stretching the metaphor a bit. But only a bit. So bear with me while I dissert a bit about spoken languages. I promise it won't take too long.</p>

<p>h2. A brief detour on Spoken Languages</p>

<p>I was born in the southern part of Spain. That region, known as Andalusia, has it's own accent. It has a distinct intonation has certain slang, but its most prominent characteristic is the omission of phonemes. I guess, to other Spanish speakers, Andalusian Spanish sounds like a mixture of Scottish and Texas English. It is also kindof considered "funny by default". Some comediants use that accent to tell jokes, even if they don't usually speak like that.</p>

<p>In addition to Andalusian, after spending 9 years in Madrid, I have a separate "compartment" in my head for Madrid's accent, which we could call "neutral Spanish". I change between Andalusian and neutral depending on who I am speaking to.</p>

<p>I also speak English and French. I only have one accent for each of those, but I know them well enough to notice how different accents sound.</p>

<p>This linguistic background has allowed me to notice certain ... differences here and there. Besides the obvious ones, like phonetical or grammatical rules, I mean; more of the semantic kind.</p>

<p>For example, French people (at least people from Paris, which are the ones I'm more familiar with) don't even say "we". I mean, they have a word for it - "nous". But they never use it when colloquially speaking. Instead, they use the impersonal "on", which roughtly translates to "it" (as in "It is said that... "). So, when they mean "let's go shopping" they say something like "it should go shopping". Crazy, right? Well, they do it all the time.</p>

<p>What can I say about English? It is so widely used that there are so many things one can say. By hearing how they pronnouce the letter "r", one can say whether someone is from one side or the other of the Atlantic. I wonder if some day "I wanna go" will be considered valid English.</p>

<p>In Spain, no one says good-bye any more. There is a word for it, of course - "Adiós". But no one says it. Everyone says "see you soon" instead. Even if it's longer. Society has decided that "Adiós" is too ... hard, I suppose.</p>

<p>They say eskimos have 7 different words for "snow". I don't know if it's true. I know that my girlfriend, who grew in the northern part of Spain, has 1 more word than me for saying "it rains", in Spanish.</p>

<p>h2. The Engineer View</p>

<p>I like to think that all men of science share a special sense of beauty. Instead of (or in addition to) being able to find beauty in a work of art, we find it in efficient, neatly organized systems and tools.</p>

<p>When I look at spoken languages from the point of view of an engineer, I find them a bit ... lacking. Spoken languages are not a very efficient tool for communicating concepts. They require more effort than it's really necessary.</p>

<p>Spanish verbs are crazily ornated. English does it better, but still requires too much memory - why say "I am, you are, he is", when you could say "I be, you be, he be"?. Speaking of English, its pronnounciation rules have too many exceptions and things that one has to remember - tomato vs potato. That one is much simpler in Spanish. My biggest grip with French is that even if lots of words are pronnounced the same way, they are written differently. The fact that the word "bureaucracy" has its roots on that particular language makes a lot of sense.</p>

<p>h2. Programming languages as tools</p>

<p>When I look at programming languages, I conserve that sense of beauty. That is why I consider myself very fortunate to be able to work with a programming language that I find aesthetically pleasant as an engineer. I enjoy using the language, and seeing where it takes me.</p>

<p>Lua is another language that I enjoy. It is smaller than ruby, and certainly less powerful, but the compromises it makes reflect what I think an embedded language should do.</p>

<p>Javascript is so ubiquous it hurts!</p>

<p>And of course there are plenty of others. Lisp. Haskell. Erlang. Html. Even CSS.</p>

<p>And yet, my sense of beauty is never satisfied. Ruby, which is my favourite, is slow in some cases. The way it handles blocks troubles me. Lua has implicit global variables, and its string manipulation library is too barebones. Javascript ... well, I used to enjoy it. After reading "Javascript: the good parts":http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742 , however, I can't help but keep noticing the bad parts. Lisp doesn't feel like a language, it feels like raw "AST":http://en.wikipedia.org/wiki/Abstract_syntax_tree manipulation. PHP... don't get me started on PHP.</p>

<p>The point is, I have grudges with all of them. It would seem that I am doomed to never be satisfied.</p>

<p>h2. The accent in programming languages</p>

<p>But I wanted to talk about the accent in programming languages. As I was saying before, I think that there are "semantic differences" between spoken languages. And I think those differences are even more pronnounced in programming languages.</p>

<p>The first programming language I ever learnt was BASIC, in the mighty "Spectrum 48k+":http://en.wikipedia.org/wiki/ZX_Spectrum#ZX_Spectrum.2B . Much later, in the University, I learnt C. And I programmed C exactly like I programmed BASIC before. Then I learnt Java ... and yet, I managed to program it as if it was BASIC. Only though time, and gradual effort, I managed to "get" this new "way of thinking" called "Object orientation".</p>

<p>... and then I started to do Object Orientation in plain C. Which was a mistake.</p>

<p>I've needed a lot of time to realize that every programming language has its strenghts; and they are often not easily "exportable". This is what I call the "nature" of a language. This "nature" is not necessarily related with the language's grammar rules. For example, Javascript has acquired an "asyncronous nature" recently, thanks to "node.js":http://nodejs.org .</p>

<p>To get the nature of a programming language, you probably should not use a grammar book. You will need a book which concentrates on "idiomatic rules" instead. Or, you could spend an inordinate amount of time reading other people's code.</p>

<p>So, when you learn your next programming language, don't stop after you learn the basic grammar rules. Try to concentrate on whether people say "Adiós" with it. Or how many ways it has for saying "snow".</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Go in Ubuntu using the PPA]]></title>
    <link href="http://kikito.github.com/blog/2012/05/09/installing-go-in-ubuntu/"/>
    <updated>2012-05-09T00:16:00+02:00</updated>
    <id>http://kikito.github.com/blog/2012/05/09/installing-go-in-ubuntu</id>
    <content type="html"><![CDATA[<p>I've recently started getting interested in <a href="http://golang.org">Go</a> (also known as <em>golang</em>), one of the new programming languages being developed by Google (another one is <a href="http://www.dartlang.org/">DART</a> , but I'm not interested in that one. Yet).</p>

<p>One of the first hurdles I have encontered is that the <a href="http://golang.org/doc/install#freebsd_linux">installation instructions</a> seem incomplete, at least for Ubuntu.
They tell you to go and download the source code and compile it on your machine. While I'm not afraid of compiling stuff myself, I'm not so fond of maintaining the compiled programs up-to-date manually. It reminds me of windows, brr.</p>

<p>When I'm trying new software I always try to find:</p>

<p>a) The official apt-package with <code>apt-cache search</code>, which will manage the updates for me, or
b) A <a href="http://www.makeuseof.com/tag/ubuntu-ppa-technology-explained/">ppa</a> , which is basically the same thing, except that
   instead of an "official" unkown Ubuntu guy these updates are managed by an unkown guy.</p>

<p>I tried to find a ppa for golang and, lo and behold! <a href="https://launchpad.net/~gophers/+archive/go">There is one</a>, and it seems reasonably official!</p>

<p>Since the official instructions don't mention how to use this wonderful resource, allow me:</p>

<p><code>bash Install golang-stagle from the gophers/go ppa
sudo add-apt-repository ppa:gophers/go
sudo apt-get update
sudo apt-get install golang-stable
</code></p>

<p>Easy peasy! No compilations or anything needed. And when Go gets a new version, you will receive it as a software update. Cool!</p>

<p>One minor thing though - Go expects you to have defined a <code>GOPATH</code> environment variable. This variable should point to a place where the Go libraries ("packages", in
Go lingo) are installed. For newbies (like me) it's better if it's a folder inside your home directory.</p>

<p>So it's just a matter of creating it! (I name it <code>.go</code> so it is invisible by default, but you may want to make it more public). Notice that there is no <code>sudo</code> on this line.</p>

<p><code>bash
mkdir $HOME/.go
</code></p>

<p>Finally, create the environment variable. Add this to your .bashrc, .zshrc or equivalent file, depending on whether you use bash, zsh or other shells.</p>

<p><code>bash
export GOPATH=$HOME/.go
</code></p>

<p>The next console you open will be prepared to execute go!</p>

<p>That's all for now. Go get some go!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cool Stuff vs Yak Shaving]]></title>
    <link href="http://kikito.github.com/blog/2012/04/03/cool-stuff-vs-yak-shaving/"/>
    <updated>2012-04-03T00:19:00+02:00</updated>
    <id>http://kikito.github.com/blog/2012/04/03/cool-stuff-vs-yak-shaving</id>
    <content type="html"><![CDATA[<p>bq. This is a copy of "a post":https://love2d.org/forums/viewtopic.php?f=4&amp;t=8608&amp;p=53181#p53181 I did recently in the LÖVE forums.</p>

<p>This is not the first time I hear about the "I don't like using libraries" thing, and I have been thinking about it for a while. I guess this is a good place to expose my views on the matter.</p>

<p>You see, for me there are two kinds of tasks in programming: there is <em>Cool Stuff</em> and there is <em>Yak Shaving</em>.</p>

<p>In a game, <em>Cool Stuff</em> is what your game is about - it could be a great gameplay. It could be a really neat set of graphics. It could be a really good story. Or very likable characters. Hell, it could be the sound, if you are doing a musical game.</p>

<p>But there is usually lots of extra stuff that you also need for your game to be considered "complete". You need to handle the menu. The animations. You need to store and retrieve information from files, etc.</p>

<p>All that stuff that "doesn't really make your game any cooler, but it's still needed", is <em>Yak Shaving</em>.</p>

<p>The problem is that lots of people (me included) end up not doing the Cool Stuff because they spend all their energy Yak Shaving. That is just sad.</p>

<p>In my opinion, anything that saves you from Shaving a Yak so you can spend time doing <em>Cool Stuff</em>, is good.</p>

<p>An example: you are using LÖVE instead of C++ and OpenGL, or direct machine code. And yet it doesn't "feel like cheating". That's because all LÖVE does is Yak Shaving. But you still need to do your part - you need to do the Cool Stuff!</p>

<p>In the "cross the country metaphor", using tween should not feel like friend giving you a lift. It should feel like a friend giving you a pair of good walking boots. You put them on and then, off you go! You are still doing the important stuff - which is walking that long, long path. It's only that now you don't have to worry about all the little pointy pebbles in the way.</p>

<p>I also want to address the "<em>but if I use libraries, I will not learn!</em>" concern.</p>

<p>First of all, I think learning is great. I'm all for learning. And I think that it is a proven fact that learning from others is more effective than having to learn it by yourself. A good teacher will explain the Theory of relativity in one hour. A class full of students, however bright they are, will forcefully take much longer than that to come up with the theory all by themselves.</p>

<p>If you want to learn, that is great! Just don't try to go "macho" and do it on your own. Open up an existing lib, and see how other people have already done it! Don't try to invent relativity, read a book about it! Be efficient!</p>

<p>I've learnt so much by reading other people's source code. I make a o point to make my libs as understandable as possible, just because of this.</p>

<p>That's pretty much it. Sorry for the long rant. I will shut up now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Small Functions are Good for the Universe]]></title>
    <link href="http://kikito.github.com/blog/2012/03/16/small-functions-are-good-for-the-universe/"/>
    <updated>2012-03-16T01:19:00+01:00</updated>
    <id>http://kikito.github.com/blog/2012/03/16/small-functions-are-good-for-the-universe</id>
    <content type="html"><![CDATA[<p>bq. This is a copy of "a post":https://love2d.org/forums/viewtopic.php?t=2826&amp;p=33948#p33950 I did some time ago in the LÖVE, which someone kindly reminded me of today.</p>

<p>h2. Why is it forbidden for a function to do two different things?</p>

<p>There are many reasons. The first one is that functions are supposed to be reusable. If you divide a big function into smaller functions, you can reuse those smaller functions in other places. The other reason is that by giving proper names to those functions, your code looks more like English and less than machine code. It's easier to understand for humans.</p>

<p>A big function is like a landscape that one has to explore in order to "understand". When you have smaller functions with significant names, those names act as "signposts" indicating where the code "goes" to humans.</p>

<p>h2. What would you use instead?</p>

<p>If a function does two things, you divide it in two functions, give those functions proper, significant, pronounceable names, and call those functions from the original one.</p>

<p>For example, if you have a big function like this one:</p>

<p>(Note: I'll be using my class library, middleclass, tangentially, just to show how a good design and object orientation facilitate making stuff)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">Turret</span><span class="p">:</span><span class="n">update</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">t</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">dx</span><span class="p">,</span><span class="n">dy</span><span class="p">,</span><span class="n">d</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">cd</span> <span class="o">=</span> <span class="nb">math.huge</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span><span class="n">p</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">Game</span><span class="p">.</span><span class="n">players</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">dx</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span>
</span><span class='line'><span class="n">dy</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="n">dx</span><span class="o">*</span><span class="n">dx</span> <span class="o">+</span> <span class="n">dy</span><span class="o">*</span><span class="n">dy</span>
</span><span class='line'><span class="k">if</span> <span class="n">d</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">cd</span> <span class="k">then</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">p</span>
</span><span class='line'>  <span class="n">cd</span> <span class="o">=</span> <span class="n">d</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="n">t</span> <span class="k">then</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Bullet</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="nb">math.atan2</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">t</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">t</span><span class="p">.</span><span class="n">y</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Complexity in code comes from functions like this one. When you have lots of functions like this, your code tends to become unmanageable, especially if you return to it after not touching it for several months. It's a code that you understand while you are writing, and certainly the machine understands it, but it doesn't have "signposts" for future visitors. They have to "explore" it to know it.</p>

<p>One option is to put a couple comments.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">Turret</span><span class="p">:</span><span class="n">update</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">-- get nearest player within sight</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">t</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">dx</span><span class="p">,</span><span class="n">dy</span><span class="p">,</span><span class="n">d</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">cd</span> <span class="o">=</span> <span class="nb">math.huge</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span><span class="n">p</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">Game</span><span class="p">.</span><span class="n">players</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">dx</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span>
</span><span class='line'><span class="n">dy</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="n">dx</span><span class="o">*</span><span class="n">dx</span> <span class="o">+</span> <span class="n">dy</span><span class="o">*</span><span class="n">dy</span>
</span><span class='line'><span class="k">if</span> <span class="n">d</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">cd</span> <span class="k">then</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">p</span>
</span><span class='line'>  <span class="n">cd</span> <span class="o">=</span> <span class="n">d</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">-- shoot a bullet to the player</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">t</span> <span class="k">then</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Bullet</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="nb">math.atan2</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">t</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">t</span><span class="p">.</span><span class="n">y</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A much, much better solution is extracting those two "different things" into functions, ditch the comments, and use better names for the variable while you are at it.</p>

<p>While you are doing this, you will suddenly realize that this function isn't really making two things. It's doing <em>LOTS</em> of things. Each one of those things belongs to a different function.</p>

<p>Like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">Turret</span><span class="p">:</span><span class="n">update</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">target</span> <span class="o">=</span> <span class="n">self</span><span class="p">:</span><span class="n">getTarget</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">target</span> <span class="k">then</span> <span class="n">self</span><span class="p">:</span><span class="n">shootAt</span><span class="p">(</span><span class="n">target</span><span class="p">)</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">function</span> <span class="nf">Turret</span><span class="p">:</span><span class="n">getTarget</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">:</span><span class="n">getNearest</span><span class="p">(</span><span class="n">Game</span><span class="p">.</span><span class="n">players</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">function</span> <span class="nf">Turret</span><span class="p">:</span><span class="n">getNearest</span><span class="p">(</span><span class="n">objects</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">distance</span><span class="p">,</span> <span class="n">nearest</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">shortestDistance</span> <span class="o">=</span> <span class="nb">math.huge</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span><span class="n">object</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">objects</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">distance</span> <span class="o">=</span> <span class="n">self</span><span class="p">:</span><span class="n">getSquaredDistance</span><span class="p">(</span><span class="n">object</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">distance</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">shortestDistance</span> <span class="k">then</span>
</span><span class='line'>  <span class="n">nearest</span> <span class="o">=</span> <span class="n">object</span>
</span><span class='line'>  <span class="n">shortestDistance</span> <span class="o">=</span> <span class="n">distance</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">nearest</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">function</span> <span class="nf">Turret</span><span class="p">:</span><span class="n">getSquaredDistance</span><span class="p">(</span><span class="n">object</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">dx</span><span class="p">,</span> <span class="n">dy</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">object</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">object</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">dx</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">dx</span> <span class="o">+</span> <span class="n">dy</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">dy</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">function</span> <span class="nf">Turret</span><span class="p">:</span><span class="n">shootAt</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
</span><span class='line'>  <span class="n">Bullet</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">self</span><span class="p">:</span><span class="n">getAngle</span><span class="p">(</span><span class="n">target</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">function</span> <span class="nf">Turret</span><span class="p">:</span><span class="n">getAngle</span><span class="p">(</span><span class="n">object</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">math.atan2</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">t</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">t</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I'm sorry but I could not make @Turrent:getNearest@ any smaller.</p>

<p>Both programs do the same; for the machine, they are no different. But for programmers, they are so much easier to understand and maintain. Take a look at @Turret:update()@! Isn't it just beautiful?</p>

<p>And now that you have smaller functions, you can reuse them in other places. I could move getDistance and getAngle to a Vector class, for example. That way I could use code for calculating distances and angles in all @Enemies@ and @Players@, not just in my @Turret@ class.</p>

<p>Notice that the @Turret@ is prepared to attack players, but it's very easy to subclass it now and create a turret that shoots other things, like asteroids. Actually, let me show you:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">AsteroidCleaningTurret</span> <span class="o">=</span> <span class="n">class</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">AsteroidCleaningTurret&#39;</span><span class="p">,</span> <span class="n">Turret</span><span class="p">)</span>
</span><span class='line'><span class="k">function</span> <span class="nf">AsteroidCleaningTurret</span><span class="p">:</span><span class="n">getTarget</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">:</span><span class="n">getNearest</span><span class="p">(</span><span class="n">Game</span><span class="p">.</span><span class="n">asteroids</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That's it. If I create an @AsteroidCleaningTurret@, it'll start shooting asteroids. In 4 lines. If the code of @Turret:update()@ was the first version, I would have had to fiddle much more in order to do this. It's so easy to modify now! I could make a @DrunkenTurret@ that calculates angles badly. Or one that shoots 4 bullets instead of just one. There're so many places you can tweak!</p>

<p>...</p>

<p>And I guess I'll just shut up now. I hope I made my point. Each function should do just one thing because that's better for the Universe.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MCUCSAOP]]></title>
    <link href="http://kikito.github.com/blog/2012/03/07/mcucsaop/"/>
    <updated>2012-03-07T00:27:00+01:00</updated>
    <id>http://kikito.github.com/blog/2012/03/07/mcucsaop</id>
    <content type="html"><![CDATA[<p>Programming is full of acronyms: "KISS":http://en.wikipedia.org/wiki/KISS_principle. "TDD":http://en.wikipedia.org/wiki/Test-driven_development. "OOP":http://en.wikipedia.org/wiki/Object-oriented_programming . "YAGNI":http://en.wikipedia.org/wiki/You_ain't_gonna_need_it .</p>

<p>In other cases there are short idioms for common concepts: ""Premature optimization is the Root of All Evil":http://c2.com/cgi/wiki?PrematureOptimization" and "GOTO considered harmful":http://c2.com/cgi/wiki?GotoConsideredHarmful</p>

<p>Well, here's one little programming principle for which I have not found a popular acronym or short idiom:</p>

<p>bq. Make the common use case simple, and the others possible.</p>

<p>a.k.a. MCUSAOP</p>

<p>It's a programming principle I keep coming back every time I'm developing a library. I like it is very adequate for that task; the steps to follow are clear: first, find the most common case, or estimate which one is it. Then, design an interface for doing it in the simplest possible way. Then, think about the next most common case, and add an interface for it, trying to minimize its impact on the first case's design. Keep doing that until all cases are covered.</p>

<p>MCUSAOP FTW!</p>
]]></content>
  </entry>
  
</feed>
