<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mac | Enrique García Cota]]></title>
  <link href="http://kikito.github.com/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://kikito.github.com/"/>
  <updated>2012-08-04T20:10:18+02:00</updated>
  <id>http://kikito.github.com/</id>
  <author>
    <name><![CDATA[Enrique García Cota]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Typing Spanish Letters in a U.S. mac keyboard]]></title>
    <link href="http://kikito.github.com/blog/2012/08/03/typing-spanish-letters-in-a-us-mac-keyboard/"/>
    <updated>2012-08-03T11:15:00+02:00</updated>
    <id>http://kikito.github.com/blog/2012/08/03/typing-spanish-letters-in-a-us-mac-keyboard</id>
    <content type="html"><![CDATA[<p>I have already mentioned that I've purchased a new Mac Book Air. I'm still adapting to it, but I wanted to share some of the things I learned from that adaptation. One of the things I'm learning to cope with is the U.S. keyboard layout that I picked.</p>

<p>The U.S. layout is great for what I do most of the time: I either program, or write in English.</p>

<p>But I am from Spain. Sometimes I must interact in Spanish. That foolish language contains all the English glyphs, and then adds all these: áéíóúüÁÉÍÓÚÜ¿!ñÑ.</p>

<p>The U.S. layout is <em>capable</em> of producing them, but it isn't a great experience.</p>

<p>I enquired some mac-savy colleages who where in the same situation I was, and they basically gave me two options:</p>

<ul>
<li>I could "switch" between the U.S. and Spanish layout, when I needed to write either language.</li>
<li>I could also keep the U.S. layout only, and "jump through its hoops" when I needed to produce Spanish letters. In other words, "man up".</li>
</ul>


<p>I dismissed the first option right away. I didn't want to keep switching layouts. That is not operative for me.</p>

<p>I gave the second option a try and, as it can be inferred from the text above, the results were not great. I felt like I needed too many keystrokes to produce characters that, when I'm writing in Spanish, are fairly common. And I have other places to "man up" first (for example, the 20-or-so basic movement commands in vim).</p>

<p>So, none of the options given was satisfying. I had to produce a third option.</p>

<p>And I did! Ladies and gentlemen, let me give you:</p>

<p>h2. "us-4-es.keylayout":https://github.com/kikito/us-4-es.keylayout</p>

<p>This keyboard layout is especially thought for people in my same situation; people with a US layout who need to write in Spanish from time to time, and who don't want to keep switching layouts.</p>

<p>It behaves exactly like the default U.S. layout on "normal" and "uppercase" mode. So when writing in English or programming, your keyboard will feel the same.</p>

<p>Changes affect the "alt-mode" though. Some of the keys work differently when the "option key" is pressed. For example, "option-a" will produce "á", "option-e" will produce "é", and so on.</p>

<p>You might find a list of all the modifications and instructions on how to install in "the project's github page":https://github.com/kikito/us-4-es.keylayout .</p>

<p>Please feel free to comment here if you have any questions/suggestions. If you find any issues, please create an issue on github instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrapping a mac for development]]></title>
    <link href="http://kikito.github.com/blog/2012/07/26/bootstrapping-a-mac-for-development/"/>
    <updated>2012-07-26T18:48:00+02:00</updated>
    <id>http://kikito.github.com/blog/2012/07/26/bootstrapping-a-mac-for-development</id>
    <content type="html"><![CDATA[<p>I recently acquired a new development machine - A Mac Book Air. I had been resisting it for quite some time now.</p>

<p>It is a very fine machine, but I'm not familiar with its operative system (I used to use Ubuntu on a custom-made PC).</p>

<p>I've spent a couple days installing and configuring it for development usage (mostly Ruby on Rails). Here's what I've done so far:</p>

<p>h3. Locate the terminal</p>

<p>I was able to find the terminal using the "find tool" (a little magnifier glass near the top right of the screen) and typing "terminal". Once I clicked on it, it appeared on the Dock. I "left-clicked" (clicked with two fingers) on it to display a contextual menu. I choose @Options > Keep in Dock@ so I didn't have to look for it again.</p>

<p>h3. Upgraded the Operative System</p>

<p>A new version of OSX (codename "Mountain Lion") had been released the day before my laptop arrived. Knowing that updates do sometimes provoke conflict with installed software, the first thing I did after booting up the machine was upgrading its operative system.</p>

<p>OSX comes with a software called "App Store". The upgrade was sold there, and was prominently advertised as well. If you have ever installed one application in a smartphone, the procedure was very similar - downloading the operative system took some time, since it weighted 4GB.</p>

<p>After the download finished, the computer requested a reboot. I noticed a couple issues:</p>

<ul>
<li>Mointain Lion comes with a new security "feature" that blocks installing software that doesn't come from the App Store - If OSX complains that "the developer is using an unkonwn signature" or something similar, activate the corresponding option in @Apple Menu > System Preferences > Security &amp; Privacy > Allow Applications downloaded from: Anywhere@.</li>
<li>I also noticed later on that the encoding is not set by default. This gave me issues later on when I started using ruby and Unicode stuff. In order to fix this, you must remember to add the following to your .profile/.bashrc/.zshrc:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
</span><span class='line'><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>


<p>h3. Install gcc for OSX</p>

<p>Macs come with no compiler installed by default. From what I could understand, the development environment is called "XCode". It's a big download, another 4GB (later on I found some claims that you don't need to download the whole XCode; the compiler can apparently be downloaded separately.</p>

<p>However, I opted for an alternative approach: I used "gcc-for-osx":https://github.com/kennethreitz/osx-gcc-installer/ . Installing it is very straightforward; download, double-click business.</p>

<p>h3. Install ruby</p>

<p>Once the compiler is in place, you can install ruby. The recommended way to do that is via a ruby version manager. There are two main ones: @rvm@ and @rbenv@. My personal preference is the former.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -L https://get.rvm.io | bash -s stable --ruby
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once the process finishes downloading and compiling, it is usually a good idea to set the default ruby version. At the time of this writing, it is ruby 1.9.3. So I did this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> ~/.bashrc
</span><span class='line'>rvm use 1.9.3 --default
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once this is done, you should be able to execute @ruby --version@ and obtain '1.9.3'.</p>

<p>I later on installed ruby 1.9.2 since I need it for this blog (which is done in "octopress":http://octopress.org , and it does not work in ruby 1.9.3).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm install 1.9.2
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>h3. Install homebrew</p>

<p>Homebrew is a tool for installing packages from the command line. I think of it as an "very limited apt-tools package". But it's the best there is on OSX, so you might as well install it. Here's how you do it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/bin/ruby -e <span class="s2">&quot;$(/usr/bin/curl -fsSL https://raw.github.com/mxcl/homebrew/master/Library/Contributions/install_homebrew.rb)&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once homebrew is installed, you can use it to install other useful packages. For example, git and wget:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install git
</span><span class='line'>brew install wget
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>h3. Vim</p>

<p>Another thing I needed was a better console, and a decent source code editor. I am used to Vim in Ubuntu, so the natural choice in OSX is using "macvim":http://code.google.com/p/macvim/ .</p>

<p>Homebrew has a recipe for installing vim, but it doesn't work if you have installed gcc instead of XCode, as I've done. So I had to download it from the website, and manually create a couple aliases (It is explained in the README file which comes with the download).</p>

<p>I'm very happy to report that "Adegan":https://github.com/kikito/adegan, my custom Vim configuration, seems to have work very well in macvim. To install it I had to use the same command I use in Ubuntu:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -Lo- https://raw.github.com/kikito/adegan/master/scripts/bootstrap.sh | bash
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>h3. iterm2 and zsh</p>

<p>The default terminal emulator is quite alright, but since I was experimenting, I decided to install it's "cool replacement", called "iterm2":http://www.iterm2.com . Again, this was a matter of downloading and double clicking, and then dragging to the Applications folder. Oh, and sticking it into the Dock.</p>

<p>Then I installed zsh, a replacement for bash. I did so from brew:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install zsh
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then I had to tell iterm2 to use zsh by default. That is done via this command:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chsh -s /bin/zsh
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Next time a console is opened, it will use zsh instead of bash.</p>

<p>I then installed ohmyzsh:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It seems that the version I installed by default sets the theme to "random". I edited the @~/.zshrc@ file and set it to "robbyrussell", which I'm used to.</p>

<p>h3. Overall experience</p>

<p>I find that, in terms of installation and configuration, OSX is intermediate. It is not as bad as Windows, where each piece of software is installed and updated independently, but it is also not as pleasant as Ubuntu, where almost everything is centralized via apt.</p>

<p>I found that some applications required "double clicking" to be installed, others had to be "extracted and copied to the Applications folder", while others had an "special window" where you could drag the application icon to applications. And then there is the App Store, and Homebrew.</p>

<p>I am also adapting to the US keyboard layout, and doing some experiments. I might post about that soon.</p>
]]></content>
  </entry>
  
</feed>
